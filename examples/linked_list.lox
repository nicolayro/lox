class Node {
    init(data, next) {
        this.data = data;
        this.next = next;
    }
}

class LinkedList {
    init() {
        this.head = nil;
        this.length = 0;
    }

    get(idx) {
        if (idx > this.length or idx < 0) {
            return nil;
        }
        var node = this.head;
        for (var i = 0; i < idx; i = i + 1) {
            node = node.next;
        }
        return node.data;
    }

    append(val) {
        var node = Node(val, nil);
        this.length = this.length + 1;

        if (this.head == nil) {
            this.head = node;
            return;
        }

        var tmp = this.head;
        while (tmp.next != nil) {
            tmp = tmp.next;
        }
        tmp.next = node;
    }

    remove(idx) {
        if (idx > this.length or idx < 0 or this.length == 0) {
            return;
        }
        this.length = this.length - 1;

        if (idx == 0) {
            this.head = this.head.next;
            return;
        }

        var prev;
        var node = this.head;
        for (var i = 0; i < idx; i = i + 1) {
            prev = node;
            node = node.next;
        }
        prev.next = node.next;
    }

}

fun list_to_str(list) {
    var str = "[ ";
    for (var i = 0; i < list.length; i = i + 1) {
        str = str + list.get(i) + " ";
    }
    str = str + "]";
    return str;
}

fun main() {
    var list = LinkedList();
    for (var i = 0; i < 10; i = i + 1) {
        list.append(i);
    }
    print "Before: " + list_to_str(list);
    list.remove(0);
    list.remove(7);
    print "After:  " + list_to_str(list);
}

main();
