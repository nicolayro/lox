/*
* Implementation of Rule 110
*   - Without array
*   - Without object/class
*
* Author: Nicolay Caspersen Roness
* Source: https://en.wikipedia.org/wiki/Rule_110
*/

var WIDTH = 60;
var DEPTH = 60;
var ON = "#";
var OFF = " ";

// Create list using currying
fun node(data) {
    fun fun_data(next) {
        fun fun_next(cb) {
            return cb(data, next);
        }
        return fun_next;
    }
    return fun_data;
}

// Acces data of node
fun data(data, next) {
    return data;
}

// Acces next
fun next(data, next) {
    return next;
}

fun create_list() {
    return nil;
}

fun push(element, list) {
    return node(element)(list);
}

fun peek(list) {
    return list(data);
}

fun pop(list) {
    return list(next);
}

fun length(list) {
    fun internal_list_length(list, acc) {
        if (list == nil) {
            return acc;
        } else {
            return internal_list_length(list(next), acc + 1);
        }
    }
    return internal_list_length(list, 0);
}

fun reverse(list) {
    var reversed = create_list();

    while (list != nil) {
        reversed = push(peek(list), reversed);
        list = pop(list);
    }

    return reversed;
}

fun print_list(list) {
    while (list != nil) {
        print peek(list);
        list = pop(list);
    }
}


fun cell_as_str(cell) {
    if (cell) {
        return ON;
    } else {
        return OFF;
    }
}

fun cell_next(a, b, c) {
    if (b) {
        if (a) {
            return !c; 
        } else {
            return true;
        }
    } else {
        return c;
    }
}

fun gen_next(curr_gen) {
    var prev = 0;
    var next_gen = create_list();
    while (curr_gen != nil) {
        var curr = peek(curr_gen);
        var next = 0;

        curr_gen = pop(curr_gen);
        if (curr_gen != nil) {
            next = peek(curr_gen);
        }

        next_gen = push(cell_next(prev, curr, next), next_gen);
        prev = curr;
    }
    return reverse(next_gen);
}

fun gen_print(gen) {
    var str_gen = "";
    while (gen != nil) {
        str_gen = str_gen + cell_as_str(peek(gen));
        gen = pop(gen);
    }
    print str_gen;
}

fun rule110() {
    // Setup
    var generation = create_list();
    generation = push(true, generation);
    for (var i = 0; i < WIDTH - 1; i = i + 1) {
        generation = push(false, generation);
    }

    // Iterate
    for (var i = 0; i < DEPTH; i = i + 1) {
        gen_print(generation);
        generation = gen_next(generation);
    }
}


fun main() {
    rule110();
}

main();
