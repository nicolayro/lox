/*
* Implementation of Rule 110
* Source: https://en.wikipedia.org/wiki/Rule_110
* 
* Author: Nicolay Caspersen Roness
*/

var MAX_DEPTH = 10;

// Parameters
fun next(a, b, c) {
    if (b == 1) {
        if (a == 1) {
            return 1 - c;
        } else {
            return 1;
        }
    } else {
        return c;
    }
}

fun val_to_str(val) {
    if (val == 0) {
        return " ";
    } else {
        return "#";
    }
}

fun print_state(one, two, three, four, five, six, seven, eight) {
    var gen = "";
    gen = gen + val_to_str(one);
    gen = gen + val_to_str(two);
    gen = gen + val_to_str(three);
    gen = gen + val_to_str(four);
    gen = gen + val_to_str(five);
    gen = gen + val_to_str(six);
    gen = gen + val_to_str(seven);
    gen = gen + val_to_str(eight);
    print gen;
}

fun rule110(one, two, three, four, five, six, seven, eight, depth) {
    print_state(one, two, three, four, five, six, seven, eight);

    if (depth == MAX_DEPTH) {
        return;
    }

    var l_one = next(0, one, two);
    var l_two = next(one, two, three);
    var l_three = next(two, three, four);
    var l_four = next(three, four, five);
    var l_five = next(four, five, six);
    var l_six = next(five, six, seven);
    var l_seven = next(six, seven, eight);
    var l_eight = next(seven, eight, 0);

    rule110(l_one, l_two, l_three, l_four, l_five, l_six, l_seven, l_eight, depth+1);
}

fun main() {
    rule110(0, 0, 0, 0, 0, 0, 0, 1, 0);
}

main();
